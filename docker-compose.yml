

services:
  # Offer Scraper Demo Server (serves ACP documents)
  offer-scraper:
    build:
      context: ./apps/offer-scraper
      dockerfile: Dockerfile
    ports:
      - "3000:3000"
    environment:
      - NODE_ENV=production
    volumes:
      - ./data:/app/data
    networks:
      - acp-network
    profiles:
      - setup

  # Global Offer Registry (GOR) API
  gor-api:
    build:
      context: ./apps/gor-api
      dockerfile: Dockerfile
    container_name: acp-gor-api
    ports:
      - "3001:3001"
    env_file:
      - ./apps/gor-api/.env
    environment:
      - PYTHONPATH=/app/src
      - QDRANT_HOST=qdrant
      - QDRANT_PORT=6333
      - DEMO_SERVER_URL=http://host.docker.internal:3000
    volumes:
      - ./apps/gor-api:/app
      - /app/venv
    working_dir: /app
    depends_on:
      qdrant:
        condition: service_healthy
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 40s
    restart: unless-stopped

  # Vector Database
  qdrant:
    image: qdrant/qdrant:latest
    container_name: acp-qdrant
    ports:
      - "6333:6333"
      - "6334:6334"
    volumes:
      - qdrant_data:/qdrant/storage
    env_file:
      - ./apps/gor-api/.env
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "bash", "-c", "timeout 5 bash -c '</dev/tcp/localhost/6333' && echo 'Port 6333 is open' || exit 1"]
      interval: 30s
      timeout: 10s
      retries: 3
      start_period: 10s





  # Transaction Simulator (placeholder for Day 5)
  tx-simulator:
    build:
      context: ./apps/tx-simulator
      dockerfile: Dockerfile
    ports:
      - "3003:3003"
    environment:
      - PORT=3003
    networks:
      - acp-network
    profiles:
      - future

  # Mock Restaurant Web Servers (Day 4)
  otto-portland:
    build:
      context: ./apps/mock-restaurants
      dockerfile: Dockerfile
    container_name: otto-portland
    ports:
      - "8001:8001"
    command: ["uv", "run", "python", "otto-portland/main.py"]
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./apps/mock-restaurants/otto-portland/data:/app/otto-portland/data:ro
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8001/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  toast-street-exeter:
    build:
      context: ./apps/mock-restaurants
      dockerfile: Dockerfile
    container_name: toast-street-exeter
    ports:
      - "8002:8002"
    command: ["uv", "run", "python", "toast-street-exeter/main.py"]
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./apps/mock-restaurants/toast-street-exeter/data:/app/toast-street-exeter/data:ro
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8002/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  newicks-lobster-house:
    build:
      context: ./apps/mock-restaurants
      dockerfile: Dockerfile
    container_name: newicks-lobster-house
    ports:
      - "8003:8003"
    command: ["uv", "run", "python", "newicks-lobster-house/main.py"]
    environment:
      - PYTHONPATH=/app
    volumes:
      - ./apps/mock-restaurants/newicks-lobster-house/data:/app/newicks-lobster-house/data:ro
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:8003/health"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped

  # Restaurant Agents (Day 4)
  restaurant-agent-otto:
    build:
      context: .
      dockerfile: apps/restaurant-agents/Dockerfile
    container_name: restaurant-agent-otto
    ports:
      - "4001:4001"
    environment:
      - AGENT_ID=otto_portland
      - PORT=4001
      - PYTHONPATH=/app
    env_file:
      - ./apps/restaurant-agents/.env
    volumes:
      - ./apps/acp-sdk:/app/acp-sdk:ro
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4001/.well-known/agent.json"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: ["uv", "run", "python", "-m", "restaurant_agents.a2a_server", "--restaurant-id", "otto_portland", "--port", "4001", "--host", "0.0.0.0"]

  restaurant-agent-street:
    build:
      context: .
      dockerfile: apps/restaurant-agents/Dockerfile
    container_name: restaurant-agent-street
    ports:
      - "4002:4002"
    environment:
      - AGENT_ID=street_exeter
      - PORT=4002
      - PYTHONPATH=/app
    env_file:
      - ./apps/restaurant-agents/.env
    volumes:
      - ./apps/acp-sdk:/app/acp-sdk:ro
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4002/.well-known/agent.json"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: ["uv", "run", "python", "-m", "restaurant_agents.a2a_server", "--restaurant-id", "street_exeter", "--port", "4002", "--host", "0.0.0.0"]

  restaurant-agent-newicks:
    build:
      context: .
      dockerfile: apps/restaurant-agents/Dockerfile
    container_name: restaurant-agent-newicks
    ports:
      - "4003:4003"
    environment:
      - AGENT_ID=newicks_lobster
      - PORT=4003
      - PYTHONPATH=/app
    env_file:
      - ./apps/restaurant-agents/.env
    volumes:
      - ./apps/acp-sdk:/app/acp-sdk:ro
    networks:
      - acp-network
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:4003/.well-known/agent.json"]
      interval: 30s
      timeout: 10s
      retries: 3
    restart: unless-stopped
    command: ["uv", "run", "python", "-m", "restaurant_agents.a2a_server", "--restaurant-id", "newicks_lobster", "--port", "4003", "--host", "0.0.0.0"]

volumes:
  qdrant_data:

networks:
  acp-network:
    driver: bridge

# Development overrides
x-dev-overrides: &dev-overrides
  volumes:
    - ./apps:/app/apps:ro
    - ./data:/app/data
  environment:
    - LOG_LEVEL=DEBUG
    - PYTHONPATH=/app

# Production overrides
x-prod-overrides: &prod-overrides
  restart: unless-stopped
  environment:
    - LOG_LEVEL=INFO
